     1                                  ; Linux 32-bit assembly
     2                                  
     3                                  ;predefined
     4                                  
     5                                  sys_exit	equ	1;
     6                                  sys_read	  equ	3;
     7                                  sys_write	equ	4
     8                                  stdin	equ	0
     9                                  stdout	equ	1
    10                                  stderr	equ	3
    11                                  
    12                                  
    13                                  SECTION .data
    14 00000000 546869732070726F67-     string: db "This program incrypts and decrypts a string"
    15 00000009 72616D20696E637279-
    16 00000012 70747320616E642064-
    17 0000001B 656372797074732061-
    18 00000024 20737472696E67     
    19                                  string_len equ	$-string
    20                                  
    21 0000002B 0A                      newline: db 0Ah
    22                                  newline_len equ $-newline
    23                                  
    24 0000002C 52406E644F6D3C4559-     key: db "R@ndOm<EY!SrAnD#m!XxVQrzHl,l;"
    25 00000035 215372416E44236D21-
    26 0000003E 58785651727A486C2C-
    27 00000047 6C3B               
    28                                  key_len:	equ	$-key
    29                                  
    30 00000049 00000000                i: dd 0
    31                                  
    32                                  SECTION .bss
    33                                  
    34                                  SECTION .text
    35                                  
    36                                  global _main
    37                                  
    38                                  _main:
    39                                  
    40                                  
    41 00000000 B9[00000000]            	mov ecx, string
    42 00000005 BA2B000000              	mov edx, string_len
    43 0000000A E865000000              	call _display
    44 0000000F B9[2B000000]            	mov ecx, newline
    45 00000014 BA01000000              	mov edx, newline_len
    46 00000019 E856000000              	call _display
    47                                  
    48 0000001E E8AA000000              	call _flip
    49 00000023 E859000000              	call _encode
    50                                  
    51 00000028 B9[00000000]            	mov ecx, string
    52 0000002D BA2B000000              	mov edx, string_len
    53 00000032 E83D000000              	call _display
    54 00000037 B9[2B000000]            	mov ecx, newline
    55 0000003C BA01000000              	mov edx, newline_len
    56 00000041 E82E000000              	call _display
    57                                  
    58 00000046 E836000000              	call _encode
    59 0000004B E87D000000              	call _flip
    60                                  
    61 00000050 B9[00000000]            	mov ecx, string
    62 00000055 BA2B000000              	mov edx, string_len
    63 0000005A E815000000              	call _display
    64 0000005F B9[2B000000]            	mov ecx, newline
    65 00000064 BA01000000              	mov edx, newline_len
    66 00000069 E806000000              	call _display
    67                                  
    68 0000006E 0F8AB5000000            	jp _exit
    69                                  
    70                                  _display:
    71 00000074 B804000000              	mov eax, sys_write
    72 00000079 BB01000000              	mov ebx, stdout
    73 0000007E CD80                    	int	80h
    74 00000080 C3                      	ret
    75                                  
    76                                  _encode:
    77 00000081 B92B000000              	mov ecx, string_len
    78 00000086 B800000000              	mov eax, 0
    79 0000008B A3[49000000]            	mov [i], eax
    80                                  
    81                                  	encode_loop:
    82                                  
    83 00000090 B81D000000              	mov eax, key_len
    84 00000095 8B1D[49000000]          	mov ebx, [i]
    85 0000009B 31D2                    	xor edx, edx
    86 0000009D 83C31D                  	add ebx, key_len
    87 000000A0 F7F3                    	div ebx
    88                                  
    89 000000A2 8B9A[2C000000]          	mov ebx, [key + edx]
    90 000000A8 8B15[49000000]          	mov edx, [i]
    91 000000AE 8B82[00000000]          	mov eax, [string + edx]
    92                                  
    93 000000B4 31D8                    	xor eax, ebx
    94                                  
    95 000000B6 8982[00000000]          	mov [string + edx], eax
    96                                  
    97 000000BC 8B15[49000000]          	mov edx, [i]    ;move the value of i to edx
    98 000000C2 42                      	inc edx         ;increment the value in edx by 1
    99 000000C3 8915[49000000]          	mov [i], edx
   100                                  
   101 000000C9 49                      	dec ecx
   102 000000CA 75C4                    	jne encode_loop
   103 000000CC C3                      	ret
   104                                  
   105                                  _flip:       ;set destination for loop
   106                                  
   107 000000CD 31C0                    	xor eax, eax
   108 000000CF 31DB                    	xor ebx, ebx
   109 000000D1 31C9                    	xor ecx, ecx
   110 000000D3 31D2                    	xor edx, edx
   111 000000D5 B82B000000              	mov eax, string_len
   112 000000DA BB02000000              	mov ebx, 2
   113 000000DF F7F3                    	div ebx
   114 000000E1 89C1                    	mov ecx, eax
   115 000000E3 B800000000              	mov eax, 0
   116 000000E8 A3[49000000]            	mov [i], eax
   117                                  
   118                                  	flip_loop:
   119                                  	;calculate the location in the array to move too.
   120 000000ED A1[49000000]            	mov eax, [i]                ;move the vlaue in i to
   121 000000F2 BA01000000              	mov edx, 1    ;move the size of a dword to edx
   122 000000F7 F7E2                    	mul edx                     ;multiply the value in eax (i) by the size of a dword
   123                                  
   124                                  	;move edx and ebx to swap locations in array
   125 000000F9 6689C2                  	mov dx, ax                            ;move the value of eax to edx
   126 000000FC 66BB2A00                	mov bx, string_len - 1    ;move the location of the last element in the array to ebx
   127 00000100 6629C3                  	sub bx, ax                            ;subtract eax from ebx
   128                                  
   129                                  	;swap array locations
   130 00000103 668B82[00000000]        	mov ax, [string + edx]  ;move the value of the array (start location + edx) to eax
   131 0000010A 668783[00000000]        	xchg ax, [string + ebx] ;swap the vlaue of the array (start location + ebx) with eax
   132 00000111 668782[00000000]        	xchg ax, [string + edx] ;swap the vlaue of the array (start location + edx) with eax
   133                                  
   134                                  	;increment i by 1
   135 00000118 8B15[49000000]          	mov edx, [i]    ;move the value of i to edx
   136 0000011E 42                      	inc edx         ;increment the value in edx by 1
   137 0000011F 8915[49000000]          	mov [i], edx    ;move the value in edx to i
   138                                  
   139                                  	;decrement loop counter and continue
   140 00000125 49                      	dec ecx     ;decrement the value in ecx by 1
   141 00000126 75C5                    	jne flip_loop    ;compare ecx to 0 and jump to loop if true continue if false
   142 00000128 C3                      	ret
   143                                  
   144                                  
   145                                  _exit:
   146 00000129 B801000000              	mov eax, 1
   147 0000012E BB00000000              	mov ebx, 0
   148 00000133 CD80                    	int	80h
